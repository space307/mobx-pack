{"version":3,"sources":["../src/lib/Binder.js"],"names":["EMITTER_EVENT","BIND","UNBIND","CALLBACK_CALLED","CALLBACK_NAME","MESSAGE_TYPES","ERROR","WARN","INFO","Binder","parentBinder","services","depsList","pendingStartResolvers","emitter","EventEmitter","allowParentOperation","service","options","addService","subscribe","bind","bindAs","unbind","Service","protoAttrs","Array","isArray","Error","name","serviceStartConfig","binderConfig","proto","onStart","result","resolver","getPendingStartResolver","serviceInBinder","getService","Promise","resolve","started","reject","console","log","factory","createService","resolveData","onStartResult","length","destructCallback","callback","serviceList","isListBind","join","getNotBind","funcToCall","parseCallback","apply","getServiceList","then","catch","err","finally","setPendingStartResolver","onStop","onStopFunctionName","validateCallback","isBind","isDebug","showMessage","item","processService","getServiceSettings","saveDeps","handleOnBind","emit","optionsCopy","onUnbind","forEach","__locked","disposers","list","settings","onBindCallbackSetList","onUnbindCallbackSetList","handleOnBindItem","handleOnUnbindItem","lookOverCallback","serviceName","lookOverDeps","depBindAs","callbackSet","applyCallback","checkCallBackResolved","isListUnBind","__resolveTM","clearTimeout","setTimeout","notBind","cbName","callbackType","reduce","acc","push","callbackSetList","cb","len","i","callbackName","slice","isBindOnParent","deps","serviceSettings","importData","unbindData","disposer","unbindDisposers","handleOnUnbind","clear","msg","type","process","env","NODE_ENV","warn","error","debug","from","to","toVarName","fromVarName","Object","defineProperty","get","configurable","obsr","pass","undefined","value","varName","initiator","raw","s","val","exportData","actionName","serviceInst","arg","api"],"mappings":"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","sourcesContent":["// @flow\n/* eslint-disable method-can-be-static, class-methods-use-this, no-console */\n\n/**\n * Binder - is a DI implementation class. Some classes may to communicate to each other through Binder.\n * Binder register services and call callback functions to resolve dependencies of one service to another\n *\n * Binder operation algorithm\n *  - While service binding to Binder or unbind it notify other services whose\n *  are waiting for it and provide the list of callbacks\n *  which should be called then other services will bind to Binder or unbind too.\n */\n\nimport { each, cloneDeep, includes } from 'lodash';\nimport { toJS } from 'mobx';\nimport { protoName } from './helper/util';\nimport EventEmitter from './helper/EventEmitter.js';\nimport type { ServiceConfigBindAsType,\n  ServiceConfigCallbackSetType,\n  InternalCallbackSetType,\n  BinderConfigType,\n  StartServiceReturnType,\n  ServiceClassType,\n  ServiceStartConfigType,\n} from './typing/common.js';\nimport type { BinderInterface } from './typing/binderInterface.js';\n\n\nconst EMITTER_EVENT = {\n  BIND: 'BIND',\n  UNBIND: 'UNBIND',\n  CALLBACK_CALLED: 'CALLBACK_CALLED',\n};\n\n\nconst CALLBACK_NAME = {\n  BIND: 'onBind',\n  UNBIND: 'onUnbind',\n};\n\nconst MESSAGE_TYPES = {\n  ERROR: 'error',\n  WARN: 'warn',\n  INFO: 'info',\n};\n\n\ntype ServiceSettingsType = {\n  bindAs: ServiceConfigBindAsType,\n  service: *,\n  options: BinderConfigType,\n  disposers:{\n    list: Array<*>,\n    services: *\n  }\n};\n\nclass Binder implements BinderInterface {\n  services: { [key: ServiceConfigBindAsType]: ?ServiceSettingsType } = {};\n\n  depsList: { [key: $Values<typeof CALLBACK_NAME>]:\n      { [key: ServiceConfigBindAsType]: Array<ServiceConfigBindAsType> } } = {\n        [CALLBACK_NAME.BIND]: {},\n        [CALLBACK_NAME.UNBIND]: {},\n      };\n\n  pendingStartResolvers:{ [key: ServiceConfigBindAsType]: Promise<*> } = {};\n\n  parentBinder: BinderInterface;\n\n  emitter: EventEmitter = new EventEmitter();\n\n  allowParentOperation: boolean = false;\n\n  constructor(parentBinder: BinderInterface): void {\n    if (parentBinder instanceof Binder) {\n      this.parentBinder = parentBinder;\n      each(parentBinder.services, ({ service, options }: {service: *, options: BinderConfigType}): void => {\n        this.addService(service, options);\n      });\n\n      parentBinder.emitter.subscribe(EMITTER_EVENT.BIND, ({ service, options }): void => {\n        this.bind(service, options);\n      });\n\n      parentBinder.emitter.subscribe(EMITTER_EVENT.UNBIND, (bindAs: ServiceConfigBindAsType): void => {\n        this.allowParentOperation = true;\n        this.unbind(bindAs);\n        this.allowParentOperation = false;\n      });\n    }\n  }\n\n  createService(Service: ServiceClassType, protoAttrs?: ?Array<*>): * {\n    if (protoAttrs && !Array.isArray(protoAttrs)) {\n      throw new Error(`Wrong ServiceParams! (${Service.name})`);\n    }\n    return protoAttrs ? new Service(...protoAttrs) : new Service();\n  }\n  /**\n   * start and bind service\n   */\n  start(\n    serviceStartConfig: ServiceStartConfigType,\n  ): Promise<*> {\n    const { binderConfig, proto } = serviceStartConfig;\n    const {\n      bindAs,\n      onStart,\n    } = binderConfig;\n\n    let result;\n    const resolver = this.getPendingStartResolver(bindAs);\n    const serviceInBinder = this.getService(bindAs);\n\n\n    if (serviceInBinder) {\n      result = Promise.resolve({ service: serviceInBinder, started: false, serviceStartConfig });\n    } else if (resolver) {\n      result = resolver;\n    } else {\n      result = new Promise(\n        (resolve: (data: StartServiceReturnType) => void, reject: (error: Error) => void): void => {\n          console.log(['serviceStartConfig', bindAs, serviceStartConfig]);\n          const service = serviceStartConfig.factory ?\n            serviceStartConfig.factory() :\n            this.createService(proto, serviceStartConfig.protoAttrs);\n          if (!service || typeof service !== 'object') {\n            throw Error(`Binder service start error. Service \"${bindAs}\" is not a valid object`);\n          }\n\n          const resolveData = { service, started: true, serviceStartConfig };\n          let onStartResult;\n\n          if (onStart && !Array.isArray(onStart)) {\n            throw Error(`Binder onStart error. onStart callback of \"${bindAs}\" is not valid`);\n          }\n\n          if (onStart && onStart.length) {\n            const {\n              callback,\n              serviceList,\n              // $FlowIgnore\n            } = this.destructCallback(onStart);\n\n            if (!this.isListBind(serviceList)) {\n              // eslint-disable-next-line max-len\n              throw Error(`Binder onStart error. onStart callback of \"${bindAs}\" wait for service list (${serviceList ? serviceList.join(',') : ''}) to be bind, but some services are not bind ${this.getNotBind(serviceList).join(',')}`);\n            }\n\n            const funcToCall = this.parseCallback(callback, service);\n\n            if (funcToCall) {\n              onStartResult = funcToCall.apply(service, this.getServiceList(serviceList));\n            }\n          }\n\n          if (typeof onStartResult === 'undefined') {\n            this.bind(service, binderConfig);\n            resolve(resolveData);\n          } else if (onStartResult instanceof Promise) {\n            onStartResult\n              .then(\n                (): void => {\n                  this.bind(service, binderConfig);\n                  resolve(resolveData);\n                },\n              )\n              .catch(\n                (err: Error): void => {\n                  reject(err);\n                },\n              );\n          } else if (onStartResult === true) {\n            this.bind(service, binderConfig);\n            resolve(resolveData);\n          } else {\n            reject(new Error(`Service ${bindAs} onStart return \"false\"`));\n          }\n        },\n      ).finally(() => {\n        this.setPendingStartResolver(bindAs, null);\n      });\n\n      this.setPendingStartResolver(bindAs, result);\n    }\n\n    return result;\n  }\n\n  /**\n   * stop and unbind service\n   */\n  stop(serviceStartConfig: ServiceStartConfigType): void {\n    const {\n      bindAs,\n      onStop,\n    } = serviceStartConfig.binderConfig;\n\n    const serviceInBinder = this.getService(bindAs);\n    const onStopFunctionName = onStop || 'onStop';\n\n    if (serviceInBinder) {\n      this.unbind(bindAs);\n      if (typeof serviceInBinder[onStopFunctionName] === 'function') {\n        serviceInBinder[onStopFunctionName]();\n      }\n    }\n  }\n\n\n  /**\n   * bind service to the binder\n   */\n  bind(service: *, options: BinderConfigType): void {\n    if (!options) {\n      throw new Error('Binder options is not valid');\n    }\n\n    const { bindAs } = options;\n\n\n    if (typeof bindAs !== 'string' || !bindAs.length) {\n      throw new Error(`Service \"${protoName(service)}\" has not valid \"bindAs\" id \"${bindAs}\".`);\n    }\n\n    this.validateCallback(options, CALLBACK_NAME.BIND);\n    this.validateCallback(options, CALLBACK_NAME.UNBIND);\n\n    if (this.isBind(bindAs)) {\n      throw new Error(`Service \"${bindAs}\" was already bind.`);\n    }\n\n    if (typeof service !== 'object') {\n      throw new Error(`Service bind param is not an object (\"${bindAs}\").`);\n    }\n\n    this.addService(service, options);\n\n    /* -- Legacy -- */\n\n    if (this.isDebug(bindAs)) {\n      this.showMessage(`\"${bindAs}\" bind.`);\n    }\n    each(this.services, (item) => {\n      if (item) {\n        this.processService(item, this.getServiceSettings(bindAs));\n        this.processService(this.getServiceSettings(bindAs), item);\n      }\n    });\n    /* --/ Legacy -- */\n\n    // save OnBind dependencies of the current service\n    this.saveDeps(bindAs, CALLBACK_NAME.BIND);\n    // save OnUnbind dependencies of the current service\n    this.saveDeps(bindAs, CALLBACK_NAME.UNBIND);\n    // check anf resolve dependencies for OnBind events\n    this.handleOnBind(bindAs);\n    // emmit event for child Binders\n    this.emitter.emit(EMITTER_EVENT.BIND, { service, options });\n  }\n\n  /**\n   * add service to the storage of services\n   */\n  addService(service: *, options: BinderConfigType): void {\n    const { bindAs } = options;\n\n    const optionsCopy = cloneDeep(options);\n\n    if (optionsCopy.onUnbind) {\n      optionsCopy.onUnbind.forEach((item) => {\n        // eslint-disable-next-line no-param-reassign\n        item.__locked = true;\n      });\n    }\n\n    this.services[bindAs] = {\n      bindAs,\n      service,\n      options: optionsCopy,\n      disposers: {\n        list: [],\n        services: {},\n      },\n    };\n  }\n\n  /**\n   * look over all OnBind callbacks and resolve dependencies\n   */\n  handleOnBind(bindAs: ServiceConfigBindAsType): void {\n    const settings = this.getServiceSettings(bindAs);\n\n    if (settings) {\n      const onBindCallbackSetList = settings.options && settings.options[CALLBACK_NAME.BIND];\n      const onUnbindCallbackSetList = settings.options && settings.options[CALLBACK_NAME.UNBIND];\n      // check and execute OnBind dependencies of other services on the current service\n      this.handleOnBindItem(bindAs);\n      // check and execute OnUnbind dependencies of other services on the current service\n      this.handleOnUnbindItem(bindAs);\n      // check and execute OnBind dependencies from the list of dependencies of the current service\n      this.lookOverCallback(onBindCallbackSetList, (serviceName) => {\n        this.handleOnBindItem(serviceName);\n      });\n      // check and execute OnUnbind dependencies from the list of dependencies of the current service\n      this.lookOverCallback(onUnbindCallbackSetList, (serviceName) => {\n        this.handleOnUnbindItem(serviceName);\n      });\n    }\n  }\n\n  /**\n   * handle OnBind callback item to resolve it\n   */\n  handleOnBindItem(bindAs: ServiceConfigBindAsType): void {\n    this.lookOverDeps(bindAs, CALLBACK_NAME.BIND,\n      (depBindAs: ServiceConfigBindAsType,\n        callbackSet: InternalCallbackSetType, service: *): void => {\n        const {\n          callback,\n          serviceList,\n        } = this.destructCallback(callbackSet);\n\n        if (!callbackSet.__locked && this.isListBind(serviceList)) {\n          this.applyCallback(depBindAs, callbackSet, serviceList, callback, service, CALLBACK_NAME.BIND);\n        } else {\n          this.checkCallBackResolved(depBindAs, callbackSet, serviceList);\n        }\n      });\n  }\n\n  /**\n   * look over all OnUnbind callbacks and resolve dependencies\n   */\n  handleOnUnbind(bindAs: ServiceConfigBindAsType): void {\n    this.lookOverDeps(bindAs, CALLBACK_NAME.BIND,\n      (depBindAs: ServiceConfigBindAsType, callbackSet: InternalCallbackSetType): void => {\n        const {\n          serviceList,\n        } = this.destructCallback(callbackSet);\n\n        if (callbackSet.__locked && this.isListUnBind(serviceList)) {\n          // eslint-disable-next-line no-param-reassign\n          delete callbackSet.__locked;\n        }\n      });\n\n    this.lookOverDeps(bindAs, CALLBACK_NAME.UNBIND,\n      (depBindAs: ServiceConfigBindAsType, callbackSet: InternalCallbackSetType, service: *): void => {\n        const {\n          callback,\n          serviceList,\n        } = this.destructCallback(callbackSet);\n\n        if (!callbackSet.__locked && this.isListUnBind(serviceList)) {\n          this.applyCallback(depBindAs, callbackSet, serviceList, callback, service, CALLBACK_NAME.UNBIND);\n        }\n      });\n  }\n\n  /**\n   * handle OnUnbind callback item to resolve it\n   */\n  handleOnUnbindItem(bindAs: ServiceConfigBindAsType): void {\n    this.lookOverDeps(bindAs, CALLBACK_NAME.UNBIND,\n      (depBindAs: ServiceConfigBindAsType, callbackSet: InternalCallbackSetType) => {\n        const {\n          serviceList,\n        } = this.destructCallback(callbackSet);\n\n        if (this.isListBind(serviceList) && callbackSet.__locked) {\n          // eslint-disable-next-line no-param-reassign\n          delete callbackSet.__locked;\n        }\n      });\n  }\n\n\n  /**\n   * check if callback was resolved if not send warning to console\n   */\n  checkCallBackResolved(bindAs: ServiceConfigBindAsType,\n    callbackSet: InternalCallbackSetType,\n    serviceList: ?Array<ServiceConfigBindAsType>): void {\n    if (callbackSet.__resolveTM) {\n      clearTimeout(callbackSet.__resolveTM);\n    }\n    // eslint-disable-next-line no-param-reassign\n    callbackSet.__resolveTM = setTimeout(() => {\n      const notBind = this.getNotBind(serviceList);\n      const cbName = callbackSet[callbackSet.length - 1];\n\n      if (serviceList && notBind.length && notBind.length < serviceList.length) {\n        this.showMessage(`\"${bindAs}.${typeof cbName === 'string' ? cbName : CALLBACK_NAME.BIND}\"\n        not called, because \"${notBind.join(',')}\" still not resolved.`, MESSAGE_TYPES.WARN);\n      }\n      // eslint-disable-next-line no-param-reassign\n      delete callbackSet.__resolveTM;\n    }, 1000);\n  }\n\n\n  /**\n   * apply callback\n   */\n\n  applyCallback(bindAs: ServiceConfigBindAsType,\n    callbackSet: InternalCallbackSetType,\n    serviceList: ?Array<ServiceConfigBindAsType>,\n    callback: ?string | ()=>void, service: *, callbackType: $Values<typeof CALLBACK_NAME>): void {\n    const funcToCall = this.parseCallback(callback, service);\n\n    if (funcToCall) {\n      funcToCall.apply(service, callbackType === CALLBACK_NAME.BIND ? this.getServiceList(serviceList) : []);\n\n      // eslint-disable-next-line no-param-reassign\n      callbackSet.__locked = true;\n      this.emitter.emit(EMITTER_EVENT.CALLBACK_CALLED, { bindAs, callbackType, callback, serviceList });\n    } else {\n      throw new Error(`${callbackType} method\n      ${typeof callback === 'string' ? callback : ''} not found in \"${bindAs}\".`);\n    }\n  }\n\n  /**\n   * get list of service id and return service instance list\n   */\n  getServiceList(serviceList: ?Array<ServiceConfigBindAsType>): Array<*> {\n    return serviceList ? serviceList.reduce((acc, bindAs) => {\n      const service = this.getService(bindAs);\n      if (service) {\n        acc.push(service);\n      }\n      return acc;\n    }, [])\n      : [];\n  }\n\n  /**\n   * look over callback list of the service and every iteration call function which was passed as attribute\n   */\n  lookOverCallback(callbackSetList: ?Array<*>,\n    cb: (serviceName: ServiceConfigBindAsType) => void): void {\n    if (callbackSetList) {\n      callbackSetList.forEach((callbackSet: ServiceConfigCallbackSetType): void => {\n        const len = callbackSet.length;\n\n        callbackSet.forEach((serviceName:ServiceConfigBindAsType, i: number): void => {\n          if (i < len - 1) {\n            cb(serviceName);\n          }\n        });\n      });\n    }\n  }\n\n  /**\n   * look over dependency list of the service and every iteration call function which was passed as attribute\n   */\n  lookOverDeps(bindAs: ServiceConfigBindAsType, callbackType: $Values<typeof CALLBACK_NAME>,\n    cb:(depBindAs: ServiceConfigBindAsType, callbackSet: InternalCallbackSetType, service: *)=>void) {\n    const list = this.depsList[callbackType][bindAs];\n\n    if (list && list.length) {\n      list.forEach((depBindAs: ServiceConfigBindAsType): void => {\n        const settings = this.getServiceSettings(depBindAs);\n\n        if (settings) {\n          const callbackSetList = settings.options && settings.options[callbackType];\n          const service = this.getService(depBindAs);\n\n          if (callbackSetList) {\n            callbackSetList.forEach((callbackSet) => {\n              if (includes(callbackSet, bindAs)) {\n                // $FlowIgnore\n                cb(depBindAs, callbackSet, service);\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * validate callback set data format\n   */\n  validateCallback(options: BinderConfigType, callbackName: $Values<typeof CALLBACK_NAME>): void {\n    const { bindAs } = options;\n\n    const list = options[callbackName];\n    if (list && list.length) {\n      if (!Array.isArray(list[0])) {\n        throw new Error(`Service \"${bindAs}\" ${callbackName} should contains\n        Array on callback data\"`);\n      } else {\n        this.lookOverCallback(list, (serviceName: ServiceConfigBindAsType): void => {\n          if (bindAs === serviceName) {\n            throw new Error(`Service \"${bindAs}\" ${callbackName} callback contains\n          the same name as service name \"${bindAs}\"`);\n          }\n        });\n\n        list.forEach((callback: ServiceConfigCallbackSetType) => {\n          if (callback.length < 2) {\n            throw new Error(`Service \"${bindAs}\" ${callbackName} should contains\n        Array this at least 2 items, but ${callback.length} given [${callback.join(',')}].\"`);\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * parse callback\n   */\n  parseCallback(callback: ?string | ()=>void, service: *): ?()=>void {\n    if (typeof callback === 'function') {\n      return callback;\n    } else if (typeof service[callback] === 'function') {\n      return service[callback];\n    }\n    return null;\n  }\n\n  /**\n   * return true if all services from list are bind\n   */\n  isListBind(list: ?Array<ServiceConfigBindAsType>): boolean {\n    return list ? list.reduce((acc, bindAs) => {\n      if (!this.isBind(bindAs)) {\n        // eslint-disable-next-line no-param-reassign\n        acc = false;\n      }\n      return acc;\n    }, true)\n      : false;\n  }\n\n  /**\n   * return list of ids for services which are not bind\n   */\n  getNotBind(list: ?Array<ServiceConfigBindAsType>): Array<ServiceConfigBindAsType> {\n    return list ? list.reduce((acc, bindAs) => {\n      if (!this.isBind(bindAs)) {\n        acc.push(bindAs);\n      }\n      return acc;\n    }, []) : [];\n  }\n\n  /**\n   * return true if all services from list are unbind\n   */\n  isListUnBind(list: ?Array<ServiceConfigBindAsType>): boolean {\n    return list ? list.reduce((acc, bindAs) => {\n      if (this.isBind(bindAs)) {\n        // eslint-disable-next-line no-param-reassign\n        acc = false;\n      }\n      return acc;\n    }, true) : true;\n  }\n\n  /**\n   * return true if service bind to parent Binder\n   */\n  isBindOnParent(bindAs: ServiceConfigBindAsType): boolean {\n    return !!(this.parentBinder && this.parentBinder.isBind(bindAs));\n  }\n\n  /**\n   * destruct callback set to service list and callback function or function name\n   */\n  destructCallback(list: InternalCallbackSetType):\n    {callback: ?string | ()=>void, serviceList: ?Array<ServiceConfigBindAsType>} {\n    const len = list && list.length;\n    const callback = len ? list[len - 1] : null;\n    const serviceList = len ? list.slice(0, len - 1) : null;\n\n    return {\n      serviceList,\n      callback,\n    };\n  }\n\n  /**\n   * return true if service bind\n   */\n  isBind(bindAs: ServiceConfigBindAsType): boolean {\n    return !!(this.services[bindAs] && this.services[bindAs].service);\n  }\n\n  /**\n   * return settings of the service\n   */\n  getServiceSettings(bindAs: ServiceConfigBindAsType): ?ServiceSettingsType {\n    return this.services[bindAs];\n  }\n\n  /**\n   * save hash of dependencies of one service to another\n   */\n  saveDeps(bindAs: ServiceConfigBindAsType, callbackType: $Values<typeof CALLBACK_NAME>): void {\n    if (this.isBindOnParent(bindAs)) {\n      return;\n    }\n\n    const settings = this.getServiceSettings(bindAs);\n\n    if (settings) {\n      const deps = settings.options && settings.options[callbackType];\n\n      if (deps && deps.length) {\n        deps.forEach((list) => {\n          const len = list && list.length;\n          list.forEach((item, i) => {\n            if (i < len - 1) {\n              if (!this.depsList[callbackType][item]) {\n                this.depsList[callbackType][item] = [];\n              }\n              if (!includes(this.depsList[callbackType][item], bindAs)) {\n                this.depsList[callbackType][item].push(bindAs);\n              }\n            }\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * return promise resolve for starting service\n   */\n  getPendingStartResolver(bindAs:ServiceConfigBindAsType): ?Promise<*> {\n    return this.pendingStartResolvers[bindAs];\n  }\n\n  /**\n   * save promise resolve for starting service to avoid double call of onStart function\n   */\n  setPendingStartResolver(bindAs:ServiceConfigBindAsType, resolver: ?Promise<*>): void{\n    if (resolver) {\n      this.pendingStartResolvers[bindAs] = resolver;\n    } else {\n      delete this.pendingStartResolvers[bindAs];\n    }\n  }\n\n  /**\n   * unbind service\n   */\n  unbind(bindAs: ServiceConfigBindAsType): void {\n    const serviceSettings = this.getServiceSettings(bindAs);\n\n    if (!this.isBind(bindAs)) {\n      this.showMessage(`Service \"${bindAs}\", which are not bind try to unbind!`, MESSAGE_TYPES.WARN);\n      return;\n    }\n\n    if (this.isBindOnParent(bindAs) && !this.allowParentOperation) {\n      throw new Error(`Try to unbind service \"${bindAs}\" from parent Binder.`);\n    }\n\n    /* -- Legacy -- */\n    // unbind data exporting to other services\n    each(this.services, (item) => {\n      if (item) {\n        const importData = item.options.importData && item.options.importData[bindAs];\n        if (importData) {\n          this.unbindData(item.bindAs, importData);\n        }\n      }\n    });\n\n    // unbind data importing from other services\n    if (serviceSettings && serviceSettings.options.importData) {\n      each(serviceSettings.options.importData, (importData) => {\n        this.unbindData(bindAs, importData);\n      });\n    }\n\n    // unbind disposers in this service\n    if (serviceSettings && serviceSettings.disposers) {\n      serviceSettings.disposers.list.forEach((disposer) => {\n        if (typeof disposer === 'function') {\n          disposer();\n        }\n      });\n    }\n\n    // unbind disposers in other services\n    this.unbindDisposers(bindAs);\n\n    if (this.isDebug(bindAs)) {\n      this.showMessage(`\"${bindAs}\" unbind.`);\n    }\n\n    /* --/ Legacy -- */\n\n    // clear service settings in binder\n    delete this.services[bindAs];\n\n    // check and execute dependencies on the OnUnbind event\n    this.handleOnUnbind(bindAs);\n    // emmit event for child services\n    this.emitter.emit(EMITTER_EVENT.UNBIND, bindAs);\n  }\n\n  /**\n   * return bind service\n   */\n  getService(bindAs: ServiceConfigBindAsType): * {\n    const settings = this.getServiceSettings(bindAs);\n    return settings && settings.service;\n  }\n\n  /**\n   * clear all binder data besides services\n   */\n  clear(): void {\n    this.depsList = {\n      [CALLBACK_NAME.BIND]: {},\n      [CALLBACK_NAME.UNBIND]: {},\n    };\n\n    this.pendingStartResolvers = {};\n    this.emitter.clear();\n  }\n  /**\n   * clear all binder data\n   */\n  clearAll(): void {\n    this.clear();\n    this.services = {};\n  }\n\n  /**\n   * show message to console\n   */\n  showMessage(msg: string, type: string = 'info'): void {\n    if (process.env.NODE_ENV === 'test') {\n      return;\n    }\n\n    if (type === MESSAGE_TYPES.INFO) {\n      console.log(`Binder. ${msg}`);\n    } else if (type === MESSAGE_TYPES.WARN) {\n      console.warn(`Binder. ${msg}`);\n    } else if (type === MESSAGE_TYPES.ERROR) {\n      console.error(`Binder. ${msg}`);\n    }\n  }\n\n  /* -- Legacy -- */\n\n  isDebug(bindAs: ServiceConfigBindAsType): ?boolean {\n    const settings = this.getServiceSettings(bindAs);\n    return settings && settings.options ? settings.options.debug : false;\n  }\n\n  processService(from: *, to: *) {\n    if (from.bindAs !== to.bindAs) {\n      const { importData } = to.options;\n\n      if (importData && importData[from.bindAs]) {\n        each(importData[from.bindAs], (toVarName, fromVarName) => {\n          if (!(fromVarName in from.service)) {\n            this.showMessage(`Variable \"${fromVarName}\" required for \"${to.bindAs}\"\n            not found in \"${from.bindAs}\"`, MESSAGE_TYPES.WARN);\n            return;\n          }\n\n          if (toVarName in to.service) {\n            this.showMessage(`Trying create link from \"${from.bindAs}.${fromVarName}\"\n            to \"${to.bindAs}.${toVarName}\", but variable \"${toVarName}\" is already exist in \"${to.bindAs}\"`,\n            MESSAGE_TYPES.WARN);\n            return;\n          }\n\n          Object.defineProperty(to.service, toVarName, {\n            get: () => {\n              if (this.isDebug(to.bindAs)) {\n                this.showMessage(`Variable \"${fromVarName}\" from \"${from.bindAs}\"\n              was taken by \"${to.bindAs}\" with name \"${toVarName}\"`);\n              }\n\n              return from.service[fromVarName];\n            },\n            configurable: true,\n          });\n        });\n      }\n    }\n  }\n\n  addDisposer(bindAs: ServiceConfigBindAsType, services: *, obsr: *) {\n    const serviceSettings = this.getServiceSettings(bindAs);\n    let pass = true;\n\n    services.forEach((serviceName) => {\n      if (!this.isBind(serviceName)) {\n        this.showMessage(`Impossible add disposer for not bind service \"${bindAs}\".`, MESSAGE_TYPES.WARN);\n        pass = false;\n      }\n    });\n\n    if (pass && serviceSettings) {\n      serviceSettings.disposers.list.push(obsr);\n\n      services.forEach((serviceName) => {\n        if (!serviceSettings.disposers.services[serviceName]) {\n          serviceSettings.disposers.services[serviceName] = [];\n        }\n\n        serviceSettings.disposers.services[serviceName].push(serviceSettings.disposers.list.length - 1);\n      });\n    }\n\n    return pass;\n  }\n\n  unbindDisposers(bindAs: ServiceConfigBindAsType) {\n    each(this.services, (service) => {\n      if (service && service.disposers.services[bindAs]) {\n        service.disposers.services[bindAs].forEach((disposer) => {\n          if (typeof service.disposers.list[disposer] === 'function') {\n            service.disposers.list[disposer]();\n            // eslint-disable-next-line no-param-reassign\n            service.disposers.list[disposer] = undefined;\n          }\n        });\n      }\n    });\n  }\n\n  unbindData(bindAs: ServiceConfigBindAsType, importData: *) {\n    const settings = this.getServiceSettings(bindAs);\n    if (settings) {\n      const { service } = settings;\n      each(importData, (toVarName) => {\n        if (toVarName in service) {\n          Object.defineProperty(service, toVarName, { value: undefined });\n        }\n      });\n    }\n  }\n\n  importVar(serviceName: ServiceConfigBindAsType, varName: string, initiator: string, raw: *) {\n    const s = this.getServiceSettings(serviceName);\n    const service = s && s.service ? s.service : null;\n    let val;\n    let exportData;\n\n    if (s && s.service && service) {\n      exportData = s.options.exportData;\n\n      if (exportData && !exportData[varName]) {\n        console.warn(`Warnning! Impossible import variable \"${varName}\" of\n        \"${s.bindAs}\" for \"${initiator}\" because variable is not included to config.exportData.`);\n        return;\n      }\n\n      val = service[varName];\n      if (s.debug) {\n        console.log(`Binder. \"${initiator}\" import variable \"${varName}\" from \"${serviceName}\".`, val);\n      }\n      return raw ? val : toJS(val); // eslint-disable-line\n    }\n\n    console.warn(`Warnning! importVar form \"${protoName(this)}\" to\n    \"${initiator}\". \"${serviceName}\" service not found.`);\n\n    return undefined; // eslint-disable-line\n  }\n\n  callApi(serviceName: ServiceConfigBindAsType,\n    actionName: ServiceConfigBindAsType,\n    initiator: ServiceConfigBindAsType, ...arg: Array<*>) {\n    if (process.env.NODE_ENV === 'test') {\n      return;\n    }\n    const s = this.getServiceSettings(serviceName);\n    let serviceInst;\n\n    if (s && s.service) {\n      serviceInst = s.service;\n\n      if (s.options.debug) {\n        console.log(`Binder callApi. \"${initiator}\" calls method \"${actionName}\" from \"${serviceName}\".`, arg);\n      }\n\n      if (serviceInst.api && serviceInst.api[actionName]) {\n        return serviceInst.api[actionName].apply(serviceInst, arg); // eslint-disable-line\n      }\n      console.warn(`CallApi warn. \"${initiator}\" calls unknown method\n      \"${actionName}\" found in service \"${serviceName}\".`);\n    } else {\n      console.warn(`CallApi warn. \"${initiator}\" calls method \"${actionName}\" from not bind service \"${serviceName}\".`);\n    }\n  }\n  /* --/ Legacy -- */\n}\n\nexport default Binder;\n"],"file":"Binder.js"}