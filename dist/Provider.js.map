{"version":3,"sources":["../src/lib/Provider.js"],"names":["convertToServiceStartConfig","ServiceProtoList","map","ServiceProto","Array","isArray","length","Error","proto","protoAttrs","undefined","binderConfig","convertToServiceHash","list","reduce","acc","item","constructor","bindAs","name","charAt","toLowerCase","slice","getComponentName","Component","createProvider","BinderContext","ServiceContext","Provider","options","defaultOptions","stop","services","props","context","state","error","serviceToStop","helper","stub","config","err","message","serviceList","setState","startServices","binder","serviceStartConfigList","then","result","toStop","service","started","serviceStartConfig","push","setServices","composeProps","hasService","serviceOk","helperOk","Stub","React","contextType"],"mappings":"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","sourcesContent":["// @flow\n/**\n * Provider start services (or get it from binder context) and pass it to ServiceContext to a child components\n */\n\nimport React from 'react';\nimport { isValidElementType } from 'react-is';\nimport { observer } from 'mobx-react';\n\nimport { startServices, stopServices, getStartedServices } from './serviceUtils.js';\nimport type { GlobalContextType, ServiceStartConfigType, StartServiceReturnType } from './typing/common.js';\n\nexport type ServicesHashType = {[key:string]:*};\n\ntype ServiceItemType = Class<*> | Array<*>;\n\ntype ProviderOptionsAttributeType = {\n  stop?: boolean,\n  services?: Array<ServiceItemType> | (props: *)=> Array<ServiceItemType>,\n  helper?: (services: ?ServicesHashType, props: *) => *,\n  stub?: React$ComponentType<*>,\n};\n\ntype ProviderOptionsPropType = {\n  ...ProviderOptionsAttributeType,\n  services: Array<ServiceItemType>,\n};\n\ntype ProviderStateTypes = {\n  error: ?string,\n  services: ?ServicesHashType,\n};\n\nexport type ProviderType = (\n  Component: React$ComponentType<*>,\n  options?: ProviderOptionsAttributeType)=>React$ComponentType<*>;\n\n/**\n * Convert incoming param with service list to start service format\n */\nfunction convertToServiceStartConfig(ServiceProtoList: Array<ServiceItemType>): Array<ServiceStartConfigType> {\n  return ServiceProtoList.map((ServiceProto: ServiceItemType): ServiceStartConfigType => {\n    if (Array.isArray(ServiceProto) && ServiceProto.length < 2) {\n      throw Error('ServiceItem passed in Provider is not valid Array');\n    }\n\n    const proto = Array.isArray(ServiceProto) && ServiceProto.length ? ServiceProto[0] : ServiceProto;\n    const protoAttrs = Array.isArray(ServiceProto) ? ServiceProto[1] : undefined;\n\n    if (typeof proto !== 'function') {\n      throw Error('Object passed as ServiceItem to Provider is not a constructor');\n    }\n\n    return {\n      proto,\n      protoAttrs,\n      binderConfig: proto.binderConfig,\n    };\n  });\n}\n\n/**\n * Convert service Array to object for service context provider\n */\nfunction convertToServiceHash(list: ?Array<*>): ?ServicesHashType {\n  return list && list.length ?\n    list.reduce((acc, item) => {\n      if (!item.constructor.binderConfig || !item.constructor.binderConfig.bindAs) {\n        throw new Error('Cannot convert service hash because binderConfig or bindAs props not exits');\n      }\n\n      const name = item.constructor.binderConfig.bindAs;\n\n      acc[name.charAt(0).toLowerCase() + name.slice(1)] = item;\n      return acc;\n    }, {}) : null;\n}\n\n/**\n * return name of React.Component\n */\nfunction getComponentName(Component: React$ComponentType<*>): string {\n  return Component && typeof Component.name === 'string' ? Component.name : 'unknown';\n}\n\nexport default function createProvider(\n  BinderContext: React$Context<GlobalContextType>,\n  ServiceContext: React$Context<?ServicesHashType>): ProviderType {\n  return function Provider(\n    Component: React$ComponentType<*>,\n    options?: ProviderOptionsAttributeType,\n  ): React$ComponentType<*> {\n    const defaultOptions = {\n      stop: false,\n      services: [],\n    };\n\n    return observer(\n      class ProviderComponent<PropType> extends React.Component<PropType, ProviderStateTypes> {\n        state: ProviderStateTypes = {\n          error: null,\n          services: null,\n        };\n\n        static contextType = BinderContext;\n\n        options: $Shape<ProviderOptionsPropType>;\n\n        serviceToStop: Array<ServiceStartConfigType> = [];\n\n        constructor(props: PropType, context) {\n          super();\n\n          if (!context) {\n            this.state.error = `Binder context not found in Provider \n            (component: ${getComponentName(Component)})`;\n          } else if (!isValidElementType(Component)) {\n            this.state.error = 'Provider wait for \"React.Component\" in attributes';\n          } else if (options && options.helper && typeof options.helper !== 'function') {\n            this.state.error = `Helper put to Provider \n            (component: ${getComponentName(Component)}) should be a function`;\n          }\n\n          if (options) {\n            const services = typeof options.services === 'function' ? options.services(props) : options.services;\n            const { stop, helper, stub } = options;\n            this.options = { ...defaultOptions, ...{ stop, helper, stub }, ...{ services } };\n          } else {\n            this.options = { ...defaultOptions };\n          }\n\n          if (this.options.services) {\n            let config;\n\n            try {\n              config = convertToServiceStartConfig(this.options.services);\n            } catch (err) {\n              this.state.error = `${err.message} (component: ${getComponentName(Component)})`;\n            }\n\n            if (context && config) {\n              const serviceList = getStartedServices(context, config);\n              this.state.services = convertToServiceHash(serviceList);\n            }\n          }\n        }\n\n        /**\n         * Ser service list to state && for service context provider\n         */\n        setServices(list) {\n          this.setState({ services: convertToServiceHash(list) });\n        }\n\n        componentDidMount(): void {\n          if ((!this.state.services || !this.state.services.length) &&\n            this.context) {\n            this.startServices();\n          }\n        }\n\n        componentWillUnmount() {\n          if (this.options.stop && this.serviceToStop && this.serviceToStop.length) {\n            stopServices(this.context, this.serviceToStop);\n          }\n        }\n\n        /**\n         * Start service procedure\n         */\n        startServices() {\n          const { services: ServiceProtoList } = this.options;\n          const binder = this.context;\n\n          if (ServiceProtoList && ServiceProtoList.length) {\n            let serviceStartConfigList;\n            try {\n              serviceStartConfigList = convertToServiceStartConfig(ServiceProtoList);\n            } catch (err) {\n              this.setState({ error: `${err.message} (component: ${getComponentName(Component)})` });\n            }\n\n            if (serviceStartConfigList) {\n              startServices(binder, serviceStartConfigList).then((services: *) => {\n                type ResultType = {\n                  toStop: Array<ServiceStartConfigType>,\n                  services: Array<*>,\n                };\n                const result = {\n                  toStop: [],\n                  services: [],\n                };\n\n                services.reduce(\n                  (acc: ResultType, { service, started, serviceStartConfig }: StartServiceReturnType): ResultType => {\n                    if (started) {\n                      acc.toStop.push(serviceStartConfig);\n                    }\n                    acc.services.push(service);\n                    return acc;\n                  },\n                  result,\n                );\n\n                this.serviceToStop = result.toStop;\n\n                this.setServices(result.services);\n              });\n            }\n          } else {\n            this.setServices([]);\n          }\n        }\n\n        /**\n         * Merge props for wrapped component and call helper\n         */\n        composeProps(services: ?ServicesHashType, props: PropType) {\n          if (services && typeof this.options.helper) {\n            return this.options.helper ? this.options.helper(services, props) : props;\n          }\n          return props;\n        }\n\n        render() {\n          if (this.state.error) {\n            throw new Error(this.state.error);\n          }\n\n          const props = this.composeProps(this.state.services, this.props);\n          const hasService = this.options.services && this.options.services.length;\n          const serviceOk = !hasService || this.state.services;\n          const helperOk = !this.options.helper || !!props;\n          const Stub = this.options.stub;\n\n          if (serviceOk && helperOk) {\n            return hasService ? (\n              <ServiceContext.Provider value={this.state.services}>\n                <Component {...props} />\n              </ServiceContext.Provider>\n            ) : (\n              <Component {...props} />\n            );\n          }\n          return typeof Stub === 'function' ? <Stub /> : null;\n        }\n      },\n    );\n  };\n}\n\n"],"file":"Provider.js"}