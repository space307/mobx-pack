{"version":3,"sources":["../src/lib/BinderProvider.js"],"names":["createBinderProvider","BinderContext","BinderProvider","Component","ComponentWrapper","props","context","state","error","newContext","Binder","clear","Error","React","contextType"],"mappings":";;;;;;;;;;;;;;;;;;;AAMA;;AACA;;;;;;AAQe,SAASA,oBAAT,CAA8BC,aAA9B,EAC+C;AAC5D,SAAO,SAASC,cAAT,CAAwBC,SAAxB,EAAmF;AAAA,QAClFC,gBADkF;AAAA;;AAAA;;AAUtF,gCAAYC,KAAZ,EAAmBC,OAAnB,EAA4B;AAAA;;AAAA;AAC1B;AAD0B,cAL5BC,KAK4B,GALM;AAChCC,UAAAA,KAAK,EAAE;AADyB,SAKN;AAAA,cAD5BC,UAC4B;AAG1B,cAAKA,UAAL,GAAkB,IAAIC,kBAAJ,CAAWJ,OAAX,CAAlB;;AAEA,YAAI,CAACH,SAAD,IAAc,OAAOA,SAAP,KAAqB,UAAvC,EAAmD;AACjD,gBAAKI,KAAL,CAAWC,KAAX,GAAmB,yDAAnB;AACD;;AAPyB;AAQ3B;;AAlBqF;AAAA;AAAA,+CAoBzD;AAC3B,cAAI,KAAKC,UAAT,EAAqB;AACnB,iBAAKA,UAAL,CAAgBE,KAAhB;AACD;AACF;AAxBqF;AAAA;AAAA,iCA0B7E;AACP,cAAI,KAAKJ,KAAL,CAAWC,KAAf,EAAsB;AACpB,kBAAM,IAAII,KAAJ,CAAU,KAAKL,KAAL,CAAWC,KAArB,CAAN;AACD;;AACD,8BAAQ,gCAAC,aAAD,CAAe,QAAf;AAAwB,YAAA,KAAK,EAAE,KAAKC;AAApC,0BACN,gCAAC,SAAD,EAAe,KAAKJ,KAApB,CADM,CAAR;AAGD;AAjCqF;AAAA;AAAA,MAEtFQ,kBAAMV,SAFgF;;AAClFC,IAAAA,gBADkF,CAG/EU,WAH+E,GAGjEb,aAHiE;AAoCxF,WAAOG,gBAAP;AACD,GArCD;AAsCD","sourcesContent":["// @flow\n\n/**\n * BinderProvider creates new binder context and provide in to child components through react context\n */\n\nimport React from 'react';\nimport Binder from './Binder.js';\nimport type { GlobalContextType } from './typing/common';\n\ntype BinderProviderStateTypes = {\n  error: ?string,\n};\n\n\nexport default function createBinderProvider(BinderContext: React$Context<GlobalContextType>):\n  (Component: React$ComponentType<*>)=>React$ComponentType<*> {\n  return function BinderProvider(Component: React$ComponentType<*>): React$ComponentType<*> {\n    class ComponentWrapper<PropType> extends\n      React.Component<{context:GlobalContextType, props:PropType}, BinderProviderStateTypes > {\n      static contextType = BinderContext;\n\n      state: BinderProviderStateTypes = {\n        error: null,\n      };\n\n      newContext:GlobalContextType;\n      constructor(props, context) {\n        super();\n\n        this.newContext = new Binder(context);\n\n        if (!Component || typeof Component !== 'function') {\n          this.state.error = 'BinderProvider wait for \"React.Component\" in attributes';\n        }\n      }\n\n      componentWillUnmount(): void {\n        if (this.newContext) {\n          this.newContext.clear();\n        }\n      }\n\n      render() {\n        if (this.state.error) {\n          throw new Error(this.state.error);\n        }\n        return (<BinderContext.Provider value={this.newContext}>\n          <Component {...this.props} />\n        </BinderContext.Provider>);\n      }\n    }\n\n    return ComponentWrapper;\n  };\n}\n\n"],"file":"BinderProvider.js"}