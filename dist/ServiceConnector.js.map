{"version":3,"sources":["../src/lib/ServiceConnector.js"],"names":["startOk","service","options","binder","isBind","config","bindAs","bind","__serviceOptions","started","stopOk","unbind","ServiceConnector","start","Promise","resolve","reject","onStart","onStartResult","call","initialState","then","err","stop","onStop"],"mappings":"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","sourcesContent":["// @flow\nimport type { ServiceConnectorOptionsTypes } from 'src/lib/typing/serviceConnectorTypes.js';\n\n\nfunction startOk(service: *, options: ServiceConnectorOptionsTypes) {\n  if (!options.binder.isBind(options.config.bindAs)) {\n    options.binder.bind(service, options.config);\n  }\n\n  service.__serviceOptions.started = true;\n}\n\nfunction stopOk(service: *, options: ServiceConnectorOptionsTypes) {\n  options.binder.unbind(options.config.bindAs);\n  service.__serviceOptions.started = false;\n}\n\n\nexport default function ServiceConnector(service: *, options: ServiceConnectorOptionsTypes): * {\n  if (!service.__serviceOptions) {\n    service.__serviceOptions = {\n      started: false,\n    };\n  }\n\n  if (typeof service.start !== 'function' && !service.__serviceOptions.started) {\n    service.start = function (): Promise<*> {\n      return new Promise((resolve, reject) => {\n        let onStart = options.onStart || service.onStart;\n        if (typeof onStart === 'string' && typeof service[onStart] === 'function') {\n          onStart = service[onStart];\n        }\n\n        if (typeof onStart === 'function' && !service.__serviceOptions.started) {\n          const onStartResult = onStart.call(service, options.initialState);\n\n          if (onStartResult instanceof Promise) {\n            onStartResult.then(() => {\n              startOk(service, options);\n              resolve();\n            }).catch((err) => {\n              reject(err);\n            });\n          } else if (onStartResult !== false) {\n            startOk(service, options);\n            resolve();\n          } else {\n            reject(`Service ${options.config.bindAs} onStart return \"false\"`); // eslint-disable-line prefer-promise-reject-errors, max-len\n          }\n        } else {\n          startOk(service, options);\n          resolve();\n        }\n      });\n    };\n\n    service.stop = function () {\n      let onStop = options.onStop || service.onStop;\n      if (typeof onStop === 'string' && typeof service[onStop] === 'function') {\n        onStop = service[onStop];\n      }\n\n      if (typeof onStop === 'function') {\n        onStop.call(service);\n      }\n\n      stopOk(service, options);\n    };\n  }\n\n  return service;\n}\n"],"file":"ServiceConnector.js"}