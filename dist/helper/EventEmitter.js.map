{"version":3,"sources":["../../src/lib/helper/EventEmitter.js"],"names":["EventEmitter","emitter","Events","eventType","payload","emit","cb","on","removeAllListeners","eventName","listener","removeListener"],"mappings":";;;;;;;;;;;;;AAEA;;IAEqBA,Y;;;;;SACnBC,O,GAAkB,IAAIC,eAAJ,E;;;;;yBAEbC,S,EAAmBC,O,EAAkB;AACxC,WAAKH,OAAL,CAAaI,IAAb,CAAkBF,SAAlB,EAA6BC,OAA7B;AACD;;;8BAESD,S,EAAmBG,E,EAAc;AACzC,WAAKL,OAAL,CAAaM,EAAb,CAAgBJ,SAAhB,EAA2BG,EAA3B;AACD;;;yCAEoB;AACnB,WAAKL,OAAL,CAAaO,kBAAb;AACD;;;mCACcC,S,EAAmBC,Q,EAAoB;AACpD,WAAKT,OAAL,CAAaU,cAAb,CAA4BF,SAA5B,EAAuCC,QAAvC;AACD","sourcesContent":["// @flow\n\nimport Events from 'events';\n\nexport default class EventEmitter {\n  emitter: Events = new Events();\n\n  emit(eventType: string, payload: *): void {\n    this.emitter.emit(eventType, payload);\n  }\n\n  subscribe(eventType: string, cb: ()=>void) {\n    this.emitter.on(eventType, cb);\n  }\n\n  removeAllListeners() {\n    this.emitter.removeAllListeners();\n  }\n  removeListener(eventName: string, listener: ()=>void) {\n    this.emitter.removeListener(eventName, listener);\n  }\n}\n"],"file":"EventEmitter.js"}