{"version":3,"sources":["../src/lib/serviceDecorators.js"],"names":["validateName","name","test","validateNameList","list","reduce","acc","item","createConfig","onStart","onStop","bindAs","onBind","onUnbind","prepareConfig","service","binderConfig","putServiceNamesToConfig","serviceNames","callbackName","optionName","pushToArray","length","forEach","serviceName","Error","existCallback","find","callback","undefined","push","splice","putMethodNameToConfig","join","proto","constructor"],"mappings":"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","sourcesContent":["// @flow\nimport { cloneDeep, last } from 'lodash';\nimport type { BinderConfigType, ServiceConfigCallbackSetType } from './typing/common.js';\n\ntype ServiceType = Class<*>;\n\n\nfunction validateName(name: string): boolean {\n  return !!(name && typeof name === 'string' && /^[A-Za-z][A-Za-z0-9_]+$/.test(name));\n}\nfunction validateNameList(list: Array<string>): boolean {\n  return list.reduce((acc, item) => {\n    if (!validateName(item)) {\n      acc = false;\n    }\n    return acc;\n  }, true);\n}\n\nfunction createConfig(): BinderConfigType {\n  return {\n    onStart: [],\n    onStop: '',\n    bindAs: '',\n    onBind: [],\n    onUnbind: [],\n  };\n}\n\nfunction prepareConfig(service: ServiceType): void {\n  if (!service.binderConfig) {\n    service.binderConfig = createConfig();\n  } else {\n    service.binderConfig = cloneDeep(service.binderConfig);\n  }\n}\n\nfunction putServiceNamesToConfig(\n  serviceNames: Array<string>,\n  service: ServiceType,\n  callbackName: string,\n  optionName: string,\n  pushToArray: boolean = true,\n): void {\n  if (serviceNames && serviceNames.length && callbackName) {\n    serviceNames.forEach(\n      (serviceName: string) => {\n        if (!validateName(serviceName)) {\n          throw new Error(`Wrong service name \"${serviceName}\" \n          passed to function \"${callbackName}\" decorator (service:${service.name}).`);\n        }\n      },\n    );\n\n    if (pushToArray) {\n      const existCallback = service.binderConfig[optionName].find(\n        (callback: ServiceConfigCallbackSetType): boolean => last(callback) === callbackName,\n      );\n\n      if (existCallback === undefined) {\n        service.binderConfig[optionName].push(\n          [...serviceNames, callbackName],\n        );\n      } else {\n        existCallback.splice(0, existCallback.length, ...serviceNames, callbackName);\n      }\n    } else {\n      service.binderConfig[optionName] = [...serviceNames, callbackName];\n    }\n  }\n}\n\n\nfunction putMethodNameToConfig(service: ServiceType, callbackName: string, optionName: string): void {\n  service.binderConfig[optionName] = callbackName;\n}\n\n\nexport function bindAs(serviceName: string): (service: ServiceType) => ServiceType {\n  if (typeof serviceName === 'function') {\n    throw new Error(`Wrong attributes passed to bindAs decorator (service:${serviceName.name}).`);\n  }\n  return (service: ServiceType): ServiceType => {\n    if (!validateName(serviceName)) {\n      throw new Error(`Wrong name \"${serviceName}\" passed to bindAs decorator (service:${service.name}).`);\n    }\n\n    prepareConfig(service);\n\n    service.binderConfig.bindAs = serviceName;\n    return service;\n  };\n}\n\n\nexport function onBind(\n  ...serviceNames: Array<string>\n): (service: ServiceType, callbackName: string) => ServiceType {\n  if (!serviceNames.length || !validateNameList(serviceNames)) {\n    throw new Error(`Wrong attributes passed to onBind decorator (${serviceNames.join(',')}).`);\n  }\n\n  return (service: ServiceType, callbackName: string): ServiceType => {\n    const proto = service.constructor;\n    prepareConfig(proto);\n\n    putServiceNamesToConfig(serviceNames, proto, callbackName, 'onBind');\n    return service;\n  };\n}\n\nexport function onUnbind(\n  ...serviceNames: Array<string>\n): (service: ServiceType, callbackName: string) => ServiceType {\n  if (!serviceNames.length || !validateNameList(serviceNames)) {\n    throw new Error(`Wrong attributes passed to onUnbind decorator (${serviceNames.join(',')}).`);\n  }\n  return (service: ServiceType, callbackName: string): ServiceType => {\n    const proto = service.constructor;\n    prepareConfig(proto);\n\n    putServiceNamesToConfig(serviceNames, proto, callbackName, 'onUnbind');\n    return service;\n  };\n}\n\n\nexport function onStart(\n  ...serviceNames: Array<string>\n): (service: ServiceType, callbackName: string) => ServiceType {\n  if (!serviceNames.length || !validateNameList(serviceNames)) {\n    throw new Error(`Wrong attributes passed to onStart decorator (${serviceNames.join(',')}).`);\n  }\n  return (service: ServiceType, callbackName: string): ServiceType => {\n    const proto = service.constructor;\n    prepareConfig(proto);\n\n    putServiceNamesToConfig(serviceNames, proto, callbackName, 'onStart', false);\n    return service;\n  };\n}\n\n\nexport function onStop(service: ServiceType, callbackName: string): ServiceType {\n  const proto = service.constructor;\n  prepareConfig(proto);\n\n  putMethodNameToConfig(proto, callbackName, 'onStop');\n  return service;\n}\n"],"file":"serviceDecorators.js"}